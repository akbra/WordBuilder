//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using System;
using System.IO;
using Whee.WordBuilder.Helpers;
using Whee.WordBuilder.ProjectV2;
using NMock2;

namespace test
{
    [TestFixture()]
    public class ProjectSerializerTest
    {
        [Test()]
        public void TestLoadProject()
        {
            IProjectNode p = ProjectSerializer.LoadString("", null, null);

            Assert.IsNotNull(p);
            Assert.AreEqual(0, p.Index);
            Assert.AreEqual(ProjectNodeType.Root, p.NodeType);
            Assert.IsEmpty(p.Children);
        }

        [Test()]
        public void TestLoadTokenSet()
        {
            IProjectNode p = ProjectSerializer.LoadString("tokens consonants b c d", null, null);

            IProjectNode c = p.Children[0];

            Assert.AreEqual(0, c.Index);
            Assert.AreEqual(ProjectNodeType.TokenSetDeclaration, c.NodeType);

            TokenSetNode tsn = c as TokenSetNode;

            Assert.AreEqual("consonants", tsn.Name);

            Assert.AreEqual(3, tsn.Tokens.Count);
        }

        [Test()]
        public void TestLoadRule()
        {
            IProjectNode p = ProjectSerializer.LoadString("rule root {\r\n\trule blah\r\n\tliteral a\r\n}\r\n", null, null);

            Assert.AreEqual(1, p.Children.Count, "Didn't find the rule.");

            IProjectNode rule = p.Children[0];

            Assert.AreEqual(ProjectNodeType.RuleDeclaration, rule.NodeType);

            RuleNode rn = rule as RuleNode;

            Assert.IsNotNull(rn);
            Assert.AreEqual(1, rn.Children.Count, "Didn't find the command block.");
            Assert.AreEqual("root", rn.Name);

            CommandBlockNode cbn = rn.Children[0] as CommandBlockNode;
            Assert.IsNotNull(cbn);

            Assert.AreEqual(2, cbn.Commands.Count);
        }

        [Test()]
        public void TestLoadRuleWithLoop()
        {
            IProjectNode p = ProjectSerializer.LoadString("rule root {\r\n\tloop 1 2 {\r\n\t\tliteral a\r\n\t}\r\n}\r\n", null, null);

            Assert.AreEqual(1, p.Children.Count, "Didn't find the rule.");

            IProjectNode rule = p.Children[0];

            Assert.AreEqual(ProjectNodeType.RuleDeclaration, rule.NodeType);

            RuleNode rn = rule as RuleNode;

            Assert.IsNotNull(rn);
            Assert.AreEqual(1, rn.Children.Count, "Didn't find the command block.");
            Assert.AreEqual("root", rn.Name);

            CommandBlockNode cbn = rn.Children[0] as CommandBlockNode;
            Assert.IsNotNull(cbn);

            Assert.AreEqual(1, cbn.Children.Count);

            Whee.WordBuilder.Model.Commands.CommandBase cb = cbn.Children[0] as Whee.WordBuilder.Model.Commands.CommandBase;

            Assert.IsInstanceOf<Whee.WordBuilder.Model.Commands.LoopCommand>(cb);

            Assert.AreEqual(1, cb.Children.Count);            
        }

        [Test()]
        public void TestLoadRuleWithPythonLoop()
        {
            IProjectNode p = ProjectSerializer.LoadString("rule root\r\n\tloop 1 2\r\n\t\tliteral a\r\n\trule a\r\n\t\r\n", null, null);

            Assert.AreEqual(1, p.Children.Count, "Didn't find the rule.");

            IProjectNode rule = p.Children[0];

            Assert.AreEqual(ProjectNodeType.RuleDeclaration, rule.NodeType);

            RuleNode rn = rule as RuleNode;

            Assert.IsNotNull(rn);
            Assert.AreEqual(1, rn.Children.Count, "Didn't find the command block.");
            Assert.AreEqual("root", rn.Name);

            CommandBlockNode cbn = rn.Children[0] as CommandBlockNode;
            Assert.IsNotNull(cbn);

            Assert.AreEqual(2, cbn.Children.Count);

            Whee.WordBuilder.Model.Commands.CommandBase cb = cbn.Children[0] as Whee.WordBuilder.Model.Commands.CommandBase;

            Assert.IsInstanceOf<Whee.WordBuilder.Model.Commands.LoopCommand>(cb);

            Assert.AreEqual(1, cb.Children.Count);
        }

        [Test()]
        public void TestLoadStartingRule()
        {
            IProjectNode p = ProjectSerializer.LoadString("StartingRule root 200\r\nStartingRule root2\r\nStartingRule root3", null, null);

            Assert.AreEqual(3, p.Children.Count);

            IProjectNode sr = p.Children[0];

            Assert.AreEqual(ProjectNodeType.StartingRuleDeclaration, sr.NodeType);

            StartingRuleNode srn = sr as StartingRuleNode;

            Assert.AreEqual("root", srn.Name);
            Assert.AreEqual(200, srn.Amount);

            sr = p.Children[1];

            Assert.AreEqual(ProjectNodeType.StartingRuleDeclaration, sr.NodeType);

            srn = sr as StartingRuleNode;

            Assert.AreEqual("root2", srn.Name);
            Assert.AreEqual(100, srn.Amount);

            sr = p.Children[2];

            Assert.AreEqual(ProjectNodeType.StartingRuleDeclaration, sr.NodeType);

            srn = sr as StartingRuleNode;

            Assert.AreEqual("root3", srn.Name);
            Assert.AreEqual(100, srn.Amount);
        }

        [Test()]
        public void TestIndentationLevelVerification()
        {
            Mockery mockery = new Mockery();
            IProjectNode pn = mockery.NewMock<IProjectNode>();
            ProjectSerializer ps = new ProjectSerializer("\tged\r\n\t  hest \r\n\tnejj\r\n", null, null);
            ps.SpacesIndent = 2;

            Token t = ps.ReadIndentationToken(pn);

            Assert.AreEqual(TokenType.Indentation, t.Type);
            Assert.AreEqual("\t", t.Text);

            t = ps.ReadTextToken(pn);

            Assert.AreEqual(TokenType.Text, t.Type);
            Assert.AreEqual("ged", t.Text);

            t = ps.ReadLineBreakToken(pn);

            t = ps.ReadIndentationToken(pn);

            Assert.AreEqual(TokenType.Indentation, t.Type);
            Assert.AreEqual("\t  ", t.Text);
            Assert.AreEqual(2, ps.GetIndentationLevel(t.Text));

            t = ps.ReadTextToken(pn);

            Assert.AreEqual(TokenType.Text, t.Type);
            Assert.AreEqual("hest", t.Text);

            t = ps.ReadLineBreakToken(pn);

            t = ps.ReadIndentationToken(pn);

            Assert.AreEqual(TokenType.Indentation, t.Type);
            Assert.AreEqual("\t", t.Text);
            Assert.AreEqual(1, ps.GetIndentationLevel(t.Text));

            ps.RollBackToken(t);

            t = ps.ReadIndentationToken(pn);

            Assert.AreEqual(TokenType.Indentation, t.Type);
            Assert.AreEqual("\t", t.Text);
            Assert.AreEqual(1, ps.GetIndentationLevel(t.Text));
        }

        [Test()]
        public void TestLoadCommandBlockPythonStyle()
        {
            Mockery mockery = new Mockery();
            IProjectSerializer mockSerializer = mockery.NewMock<IProjectSerializer>();

            using (mockery.Ordered)
            {
                Expect.Once.On(mockSerializer).GetProperty("Position").Will(Return.Value(0));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 0, 2)));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.LineBreak, "\t\t", 2, 2)));
                Expect.Once.On(mockSerializer).Method("GetIndentationLevel").Will(Return.Value(2));
                Expect.Once.On(mockSerializer).Method("ReadBlockStarterToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("LastIndentationLevel").Will(Return.Value(0));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("GetIndentationLevel").Will(Return.Value(2));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "token", 4, 5)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(3));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "consonants", 9, 10)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 19, 2)));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t\t", 21, 2)));
                Expect.Once.On(mockSerializer).Method("GetIndentationLevel").Will(Return.Value(2));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Command, "rule", 23, 4)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(3));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "second", 27, 6)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 19, 2)));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 33, 1)));
                Expect.Once.On(mockSerializer).Method("GetIndentationLevel").Will(Return.Value(1));
                Expect.Once.On(mockSerializer).Method("RollBackToken");
            }

            CommandBlockNode cbn = new CommandBlockNode(mockSerializer);

            Assert.AreEqual(2, cbn.Commands.Count);

            mockery.VerifyAllExpectationsHaveBeenMet();
        }
        //    DynamicMock mockSerializer = new DynamicMock(typeof(IProjectSerializer));

        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Indentation, "\t", 0, 1), TokenType.Indentation | TokenType.LineBreak | TokenType.Command | TokenType.BlockStarter, -1);
        //    mockSerializer.ExpectAndReturn("GetIndentationLevel", 1, "\t");
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Command, "token", 1, 5), TokenType.Indentation | TokenType.LineBreak | TokenType.Command | TokenType.BlockStarter, -1);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Text, "consonants", 7, 10), TokenType.LineBreak | TokenType.Text);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.LineBreak, "\r\n", 17, 2), TokenType.Text | TokenType.LineBreak);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Indentation, "\t", 19, 1), TokenType.Indentation | TokenType.LineBreak | TokenType.Command, 1);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Command, "rule", 20, 4), TokenType.Indentation | TokenType.LineBreak | TokenType.Command, 1);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Text, "second", 25, 6), TokenType.Text | TokenType.LineBreak);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.LineBreak, "\r\n", 31, 2), TokenType.Text | TokenType.LineBreak);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.Indentation, "\t", 33, 1), TokenType.Indentation | TokenType.LineBreak | TokenType.Command, 1);
        //    mockSerializer.ExpectAndReturn("ReadToken", new Token(TokenType.LineBreak, "\r\n", 34, 2), TokenType.Indentation | TokenType.LineBreak | TokenType.Command, 1);
        //    mockSerializer.ExpectAndReturn("ReadToken", null, TokenType.Indentation | TokenType.LineBreak | TokenType.Command, 1);

        //    CommandBlockNode cbn = new CommandBlockNode((IProjectSerializer)mockSerializer.MockInstance);

        //    Assert.AreEqual(2, cbn.Commands.Count);
        //    mockSerializer.Verify();
        //}

        [Test()]
        public void TestLoadCommandBlockCStyle()
        {
            Mockery mockery = new Mockery();
            IProjectSerializer mockSerializer = mockery.NewMock<IProjectSerializer>();

            using (mockery.Ordered)
            {
                Expect.Once.On(mockSerializer).GetProperty("Position").Will(Return.Value(0));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 0, 2)));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 2, 1)));
                Expect.Once.On(mockSerializer).Method("GetIndentationLevel").Will(Return.Value(1));
                Expect.Once.On(mockSerializer).Method("ReadBlockStarterToken").Will(Return.Value(new Token(TokenType.BlockStarter, "{", 3, 1)));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 4, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 6, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "token", 7, 5)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(3));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "consonants", 12, 10)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 22, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 24, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Command, "rule", 25, 4)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(4));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "second", 29, 6)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 35, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 37, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 38, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(new Token(TokenType.BlockEnder, "}", 40, 1)));
            }

            CommandBlockNode cbn = new CommandBlockNode(mockSerializer);

            Assert.AreEqual(2, cbn.Commands.Count);

            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestLoadCommandBlockWBStyle()
        {
            Mockery mockery = new Mockery();
            IProjectSerializer mockSerializer = mockery.NewMock<IProjectSerializer>();

            using (mockery.Ordered)
            {
                Expect.Once.On(mockSerializer).GetProperty("Position").Will(Return.Value(0));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadBlockStarterToken").Will(Return.Value(new Token(TokenType.BlockStarter, "{", 3, 1)));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 4, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 6, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "token", 7, 5)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(3));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "consonants", 12, 10)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 22, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 24, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Command, "rule", 25, 4)));
                Expect.Once.On(mockSerializer).GetProperty("LineNumber").Will(Return.Value(3));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(new Token(TokenType.Text, "second", 29, 6)));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 35, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadIndentationToken").Will(Return.Value(new Token(TokenType.Indentation, "\t", 37, 1)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).GetProperty("Done").Will(Return.Value(false));
                Expect.Once.On(mockSerializer).Method("ReadTextToken").Will(Return.Value(null));
                Expect.Once.On(mockSerializer).Method("ReadLineBreakToken").Will(Return.Value(new Token(TokenType.LineBreak, "\r\n", 38, 2)));
                Expect.Once.On(mockSerializer).Method("ReadBlockEnderToken").Will(Return.Value(new Token(TokenType.BlockEnder, "}", 40, 1)));
            }

            CommandBlockNode cbn = new CommandBlockNode(mockSerializer);

            Assert.AreEqual(2, cbn.Commands.Count);

            mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestReadTextToken()
        {
            Mockery mockery = new Mockery();
            IProjectNode pn = mockery.NewMock<IProjectNode>();
            ProjectSerializer ps = new ProjectSerializer("a \"b\" c\"d \"e\\\"f\" g \"h i\"", null, null);

            Token t = ps.ReadTextToken(pn);
            Assert.AreEqual(0, t.Offset);
            Assert.AreEqual(1, t.Length);
            Assert.AreEqual("a", t.Text);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(2, t.Offset);
            Assert.AreEqual(3, t.Length);
            Assert.AreEqual("b", t.Text);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(6, t.Offset);
            Assert.AreEqual(3, t.Length);
            Assert.AreEqual("c\"d", t.Text);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(10, t.Offset);
            Assert.AreEqual(6, t.Length);
            Assert.AreEqual("e\"f", t.Text);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(17, t.Offset);
            Assert.AreEqual(1, t.Length);
            Assert.AreEqual("g", t.Text);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(19, t.Offset);
            Assert.AreEqual(5, t.Length);
            Assert.AreEqual("h i", t.Text);
        }

        [Test()]
        public void TestLineNumber()
        {
            Mockery mockery = new Mockery();
            IProjectNode pn = mockery.NewMock<IProjectNode>();
            ProjectSerializer ps = new ProjectSerializer("a\r\nb;\n\nc", null, null);

            Token t = ps.ReadTextToken(pn);
            Assert.AreEqual(1, t.LineNumber);

            ps.ReadLineBreakToken(pn);
            t = ps.ReadTextToken(pn);
            Assert.AreEqual(2, t.LineNumber);

            ps.ReadLineBreakToken(pn);

            t = ps.ReadTextToken(pn);
            Assert.AreEqual(4, t.LineNumber);
        }

        [Test()]
        public void TestRepeatingToken()
        {
            Mockery mockery = new Mockery();
            IProjectNode pn = mockery.NewMock<IProjectNode>();
            ProjectSerializer ps = new ProjectSerializer("4[a] 15[b c] 6[", null, null);

            int reps;
            string data;
            Token four = ps.ReadRepeatingToken(pn, out reps, out data);

            Assert.IsNotNull(four);
            Assert.AreEqual(4, reps);
            Assert.AreEqual("a", data);

            Token five = ps.ReadRepeatingToken(pn, out reps, out data);
            Assert.IsNotNull(five);
            Assert.AreEqual(15, reps);
            Assert.AreEqual("b c", data);

            Token sixPartial = ps.ReadRepeatingToken(pn, out reps, out data);
            Assert.IsNull(sixPartial);
        }
    }
}
