//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using NUnit.Mocks;
using System;
using Whee.WordBuilder.Model;
using Whee.WordBuilder.Helpers;

namespace test
{


	[TestFixture()]
	public class DocumentTest
	{

		[Test()]
		public void TestSave()
		{
			Document dm = new Document();
			dm.Text = "abc";
			
			dm.FileName = @"c:\abc.wordo";
			
			DynamicMock fs = new DynamicMock(typeof (IFileSystem));
			
			fs.Expect("WriteAllText", @"c:\abc.wordo", "abc");
			
			dm.Save((IFileSystem)fs.MockInstance);
			
			fs.Verify();
		}
		
		[Test()]
		public void TestLoad()
		{
			Document dm = new Document();
			
			dm.FileName = @"c:\abc.wordo";
			
			DynamicMock fs = new DynamicMock(typeof (IFileSystem));
			
			fs.ExpectAndReturn("ReadAllText", "abc", @"c:\abc.wordo");
			
			dm.Load((IFileSystem)fs.MockInstance);
			
			fs.Verify();
			
			Assert.AreEqual("abc", dm.Text);
		}		
		
		[Test()]
		public void TestDirty()
		{
			Document dm = new Document();
			Assert.IsFalse(dm.Dirty);
			
			dm.Text = "abc";
			Assert.IsTrue(dm.Dirty);

			dm.FileName = @"c:\abc.wordo";			
			DynamicMock fs = new DynamicMock(typeof (IFileSystem));			
			dm.Save((IFileSystem)fs.MockInstance);
			
			Assert.IsFalse(dm.Dirty);
			
			dm.Text = "abc2";
			
			Assert.IsTrue(dm.Dirty);
			
			dm.Save((IFileSystem)fs.MockInstance);
			
			Assert.IsFalse(dm.Dirty);

			fs.ExpectAndReturn("ReadAllText", "abc3", @"c:\abc.wordo");

			dm.Load((IFileSystem)fs.MockInstance);

			Assert.AreEqual("abc3", dm.Text);
			Assert.IsFalse(dm.Dirty);			
		}
	}
}
