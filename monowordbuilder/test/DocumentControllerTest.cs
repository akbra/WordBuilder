//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using System;
using Whee.WordBuilder.Model;
using Whee.WordBuilder.Controller;
using Whee.WordBuilder.UIHelpers;
using Whee.WordBuilder.Helpers;
using NUnit.Mocks;

namespace test
{
	[TestFixture()]
	public class DocumentControllerTest
	{

		[SetUp()]
		public void Setup()
		{
			m_Document = new Document();
			m_TextViewHelper = new DynamicMock(typeof(ITextViewHelper));
			m_FileSystem = new DynamicMock(typeof(IFileSystem));
			m_FileDialogHelper = new DynamicMock(typeof(IFileDialogHelper));
			m_WarningViewHelper = new DynamicMock(typeof(IWarningViewHelper));
			
			m_DocumentController = new DocumentController((IWarningViewHelper)m_WarningViewHelper.MockInstance, (IFileSystem)m_FileSystem.MockInstance, (IFileDialogHelper)m_FileDialogHelper.MockInstance, (ITextViewHelper)m_TextViewHelper.MockInstance, m_Document);
		}

		private Document m_Document;
		private DocumentController m_DocumentController;
		private DynamicMock m_TextViewHelper;
		private DynamicMock m_FileSystem;
		private DynamicMock m_WarningViewHelper;
		private DynamicMock m_FileDialogHelper;
		
		[Test()]
		public void TestConstructor()
		{
			Assert.IsNotNull(m_DocumentController);
		}
		
		[Test()]
		public void TestNew()
		{
			m_Document.Text = "abc";

			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.NoSave);
			m_TextViewHelper.ExpectNoCall("OnDocumentChanged");
			m_TextViewHelper.Expect("Clear");
			m_DocumentController.New();
			
			Assert.IsEmpty(m_Document.Text);
			
			m_TextViewHelper.Verify();
		}
		
		[Test()]
		public void TestTransferTextFromModel()
		{
			m_Document.Text = "abc";
			m_TextViewHelper.Expect("OnDocumentChanged", m_DocumentController, "def");
			m_Document.Text = "def";
			m_TextViewHelper.Verify();			
		}

		[Test()]
		public void TestTransferTextToModel()
		{
			m_Document.Text = "abc";
			
			m_TextViewHelper.ExpectNoCall("OnDocumentChanged");
			m_DocumentController.OnTextViewChanged(m_TextViewHelper, "abcd");
			
			Assert.AreEqual("abcd", m_Document.Text);
			m_TextViewHelper.Verify();
		}
		
		[Test()]
		public void TestSaveWithFileName()
		{
			m_Document.Text = "abc";
			m_Document.FileName = @"c:\abc.wordo";
					
			m_FileSystem.ExpectAndReturn("WriteAllText", true, @"c:\abc.wordo", "abc");

			m_DocumentController.Save();

			m_FileSystem.Verify();
		}
		
		[Test()]
		public void TestSaveWithoutFileName()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveDialog", @"c:\abc.wordo");
			
			m_FileSystem.ExpectAndReturn("WriteAllText", true, @"c:\abc.wordo", "abc");

			m_DocumentController.Save();

			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			
			Assert.AreEqual(@"c:\abc.wordo", m_Document.FileName);
		}		

		[Test()]
		public void TestSaveWithoutFileNameCanceled()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveDialog", null);
			
			m_FileSystem.ExpectNoCall("WriteAllText");

			m_DocumentController.Save();

			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			Assert.IsNull(m_Document.FileName);
		}

		[Test()]
		public void TestSaveAs()
		{
			m_Document.Text = "abc";
			m_Document.FileName = @"c:\abc.wordo";

			m_FileDialogHelper.ExpectAndReturn("ShowSaveDialog", @"c:\abc2.wordo");
			
			m_FileSystem.ExpectAndReturn("WriteAllText", true, @"c:\abc2.wordo", "abc");

			m_DocumentController.SaveAs();

			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			
			Assert.AreEqual(@"c:\abc2.wordo", m_Document.FileName);
		}		

		[Test()]
		public void TestSaveAsCanceled()
		{
			m_Document.Text = "abc";
			m_Document.FileName = @"c:\abc.wordo";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveDialog", null);
			
			m_FileSystem.ExpectNoCall("WriteAllText");

			m_DocumentController.SaveAs();

			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			Assert.AreEqual(@"c:\abc.wordo", m_Document.FileName);
		}

		[Test()]
		public void TestOpen()
		{
			m_FileDialogHelper.ExpectAndReturn("ShowOpenDialog", @"c:\abc.wordo");
			
			m_FileSystem.ExpectAndReturn("ReadAllText", "abc", @"c:\abc.wordo");

			m_DocumentController.Open();

			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			
			Assert.AreEqual(@"c:\abc.wordo", m_Document.FileName);
		}
		
		[Test()]
		public void TestCheckSave()
		{
			m_FileDialogHelper.ExpectNoCall("ShowSaveCheckDialog");
			Assert.AreEqual(SaveCheckDialogResult.NoSave, m_DocumentController.CheckSave());
			m_FileDialogHelper.Verify();

			m_Document.Text = "abc";		
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Save);			
			Assert.AreEqual(SaveCheckDialogResult.Save, m_DocumentController.CheckSave());
			m_FileDialogHelper.Verify();

			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.NoSave);
			Assert.AreEqual(SaveCheckDialogResult.NoSave, m_DocumentController.CheckSave());
			m_FileDialogHelper.Verify();
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Cancel);
			Assert.AreEqual(SaveCheckDialogResult.Cancel, m_DocumentController.CheckSave());
			m_FileDialogHelper.Verify();			
		}
		
		[Test()]
		public void TestNewWithDirty()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.NoSave);
			
			m_DocumentController.New();
			
			m_FileDialogHelper.Verify();

			Assert.IsEmpty(m_Document.Text);
		}

		[Test()]
		public void TestNewWithDirtyCancelled()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Cancel);
			
			m_DocumentController.New();
			
			m_FileDialogHelper.Verify();

			Assert.AreEqual("abc", m_Document.Text);
		}

		[Test()]
		public void TestNewWithDirtySave()
		{
			m_Document.Text = "abc";
			
			m_Document.FileName = @"c:\abc.wordo";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Save);
			m_FileSystem.Expect("WriteAllText", @"c:\abc.wordo", "abc");
			
			m_DocumentController.New();
			
			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			
			Assert.IsEmpty(m_Document.Text);
		}

		[Test()]
		public void TestOpenWithDirty()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.NoSave);
			m_FileDialogHelper.ExpectAndReturn("ShowOpenDialog", @"c:\abc.wordo");

			m_FileSystem.ExpectAndReturn("ReadAllText", "def", @"c:\abc.wordo");

			m_DocumentController.Open();
			
			m_FileDialogHelper.Verify();			
			m_FileSystem.Verify();
			
			Assert.AreEqual("def", m_Document.Text);
		}

		[Test()]
		public void TestOpenWithDirtyCancelled()
		{
			m_Document.Text = "abc";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Cancel);
			
			m_DocumentController.Open();
			
			m_FileDialogHelper.Verify();

			Assert.AreEqual("abc", m_Document.Text);
		}

		[Test()]
		public void TestOpenWithDirtySave()
		{
			m_Document.Text = "abc";
			
			m_Document.FileName = @"c:\abc.wordo";
			
			m_FileDialogHelper.ExpectAndReturn("ShowSaveCheckDialog", SaveCheckDialogResult.Save);
			m_FileSystem.Expect("WriteAllText", @"c:\abc.wordo", "abc");

			m_FileDialogHelper.ExpectAndReturn("ShowOpenDialog", @"c:\def.wordo");
			m_FileSystem.ExpectAndReturn("ReadAllText", "def", @"c:\def.wordo");
			
			m_DocumentController.Open();
			
			m_FileDialogHelper.Verify();
			m_FileSystem.Verify();
			
			Assert.AreEqual("def", m_Document.Text);
		}
		
		[Test()]
		public void TestCompile()
		{
			m_Document.Text = "rule root {\n  literal a\n}\n";
			
			Project project = m_DocumentController.Compile();
			
			Assert.IsNotNull(project);
			Assert.IsNotNull(project.Rules.GetRuleByName("root"));
			Assert.IsEmpty(project.Warnings);
		}
		
		[Test()]
		public void TestWarnings()
		{
			m_Document.Text = "rule root {\n  token a\n}\n";

			m_WarningViewHelper.Expect("Clear");
			m_WarningViewHelper.Expect("AddWarning");
			Project project = m_DocumentController.Compile();
			
			Assert.IsNull(project);

			m_WarningViewHelper.Verify();
		}
		
		[Test()]
		public void TestGotoLine()
		{
			m_TextViewHelper.Expect("GotoLine", 2);
			
			m_DocumentController.GotoLine(2);
			
			m_TextViewHelper.Verify();
		}
	}
}
