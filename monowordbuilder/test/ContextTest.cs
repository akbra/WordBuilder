//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using System;
using Whee.WordBuilder.Model;

namespace test
{
	[TestFixture()]
	public class ContextTest
	{

		[Test()]
		public void TestRuleCount ()
		{
			Context c = new Context();
			
			Assert.AreEqual(0, c.RuleCount);
			
			Assert.AreEqual(1, c.IncrementRuleCount());

			Assert.AreEqual(1, c.RuleCount);

			Assert.AreEqual(2, c.IncrementRuleCount());
			
			c.ResetRuleCount();

			Assert.AreEqual(0, c.RuleCount);
		}
		
		[Test()]
		public void TestBranch()
		{
			Context c = new Context();
			
			Assert.AreEqual(0, c.Branches.Count);
			
			c.Tokens.Add("a");
			
			Context branch = c.Branch("sub1");
			
			Assert.AreEqual(1, c.Branches.Count);
			
			Assert.Contains("sub1", c.Branches.Keys);
			
			Assert.Contains("a", branch.Tokens);
			
			Assert.AreEqual("a", branch.ToString());
		}
		
		[Test()]
		public void TestToString()
		{
			Context c = new Context();
			
			c.Tokens.Add("a");
			c.Tokens.Add("b");
			c.Tokens.Add("c");
			c.Tokens.Add("d");
			
			Assert.AreEqual("abcd", c.ToString());
		}
		
		[Test()]
		public void TestDescription()
		{
			Context c = new Context();
			
			c.Tokens.Add("a");
			c.Tokens.Add("b");
			c.Tokens.Add("c");
			
			Assert.AreEqual("abc", c.Description(""));
			
			c.Mark("m1", "m1");
			
			Assert.AreEqual("abc\r\nm1: m1", c.Description(""));
			
			Context branch = c.Branch("b1");
			branch.Tokens.Add("d");
			
			Assert.AreEqual("abc\r\nm1: m1\r\n\tb1: abcd", c.Description(""));
			
			branch.Mark("m2", "m2");
			Assert.AreEqual("abc\r\nm1: m1\r\n\tb1: abcd\r\n\tm2: m2", c.Description(""));			
		}
		
		[Test()]
		public void TestGetColumn()
		{
			Project p = new Project(null);
			Context c = new Context();
			
			c.Tokens.Add("a");
			c.Tokens.Add("b");
			c.Tokens.Add("c");
			
			Assert.AreEqual("abc", c.GetColumn("", p));
			
			c.Mark("m1", "m1");
			
			Assert.AreEqual("m1", c.GetColumn("!m1", p));
			
			Context branch = c.Branch("b1");
			branch.Tokens.Add("d");
			
			Assert.AreEqual("abcd", c.GetColumn("b1", p));
			
			branch.Mark("m2", "m2");
			Assert.AreEqual("m2", c.GetColumn("b1.!m2", p));						
			
			Context branch2 = branch.Branch("b2");
			branch2.Tokens.Add("e");
			
			Assert.AreEqual("abcde", c.GetColumn("b1.b2", p));
		}
	}
}
