//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using NUnit.Framework;
using System;
using System.Collections.Generic;

using Whee.WordBuilder.Controller;
using Whee.WordBuilder.Helpers;
using Whee.WordBuilder.UIHelpers;
using Whee.WordBuilder.Exporters;
using Whee.WordBuilder.Model;
using Whee.WordBuilder.Model.Commands;
using NMock2;

namespace test
{
    [TestFixture()]
    public class GeneratorControllerTest
    {
        [SetUp()]
        public void Setup()
        {
            m_Mockery = new Mockery();

            m_FileSystem = m_Mockery.NewMock<IFileSystem>();
            m_ClipBoardHelper = m_Mockery.NewMock<IClipBoardHelper>();
            m_ResultViewHelper = m_Mockery.NewMock<IResultViewHelper>();
            m_DetailsTextViewHelper = m_Mockery.NewMock<ITextViewHelper>();
            m_ExportHelper = m_Mockery.NewMock<IExporter>();
            Expect.Once.On(m_ResultViewHelper).EventAdd("SelectionChanged", Is.Anything);
            m_GeneratorController = new GeneratorController(m_FileSystem, m_ResultViewHelper, m_ClipBoardHelper, m_DetailsTextViewHelper);
        }

        private Mockery m_Mockery;
        private IFileSystem m_FileSystem;
        private IExporter m_ExportHelper;
        private ITextViewHelper m_DetailsTextViewHelper;
        private IResultViewHelper m_ResultViewHelper;
        private IClipBoardHelper m_ClipBoardHelper;
        private GeneratorController m_GeneratorController;

        [Test()]
        public void TestClear()
        {
            Expect.Once.On(m_ResultViewHelper).Method("Clear");
            m_GeneratorController.Clear();
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestGenerateNoStartingRules()
        {
            for (int i = 0; i < 100; i++)
            {
                Expect.Once.On(m_ResultViewHelper).Method("AddItem");
            }

            IRandom random = m_Mockery.NewMock<IRandom>();
            Project project = new Project(random);

            Rule rule = new Rule();

            rule.Name = "root";
            rule.Probability = 1.0;
            rule.LineNumber = 1;

            Expect.AtLeastOnce.On(random).Method("NextDouble").Will(Return.Value((double)0.5));

            LiteralCommand a = new LiteralCommand();
            a.Literal = "a";
            rule.Commands.Add(a);

            project.Rules.Add(rule);

            m_GeneratorController.Generate(project);

            Assert.AreEqual(1, project.StartRules.Count);
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestGenerateOneStartingRule()
        {
            for (int i = 0; i < 10; i++)
            {
                Expect.Once.On(m_ResultViewHelper).Method("AddItem");
            }

            IRandom random = m_Mockery.NewMock<IRandom>();
            Project project = new Project(random);

            Rule rule = new Rule();

            rule.Name = "test";
            rule.Probability = 1.0;
            rule.LineNumber = 1;

            LiteralCommand a = new LiteralCommand();
            a.Literal = "a";
            rule.Commands.Add(a);

            project.Rules.Add(rule);

            project.StartRules.Add("test", 10);

            Expect.AtLeastOnce.On(random).Method("NextDouble").Will(Return.Value((double)0.5));

            m_GeneratorController.Generate(project);

            Assert.AreEqual(1, project.StartRules.Count);
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestGenerateTwoStartingRules()
        {
            for (int i = 0; i < 10; i++)
            {
                Expect.Once.On(m_ResultViewHelper).Method("AddItem");
            }

            IRandom random = m_Mockery.NewMock<IRandom>();
            Project project = new Project(random);

            Rule rule = new Rule();

            rule.Name = "test";
            rule.Probability = 1.0;
            rule.LineNumber = 1;

            LiteralCommand a = new LiteralCommand();
            a.Literal = "a";
            rule.Commands.Add(a);

            Rule rule2 = new Rule();

            rule2.Name = "test2";
            rule2.Probability = 1.0;
            rule2.LineNumber = 1;

            LiteralCommand b = new LiteralCommand();
            b.Literal = "b";
            rule2.Commands.Add(b);

            project.Rules.Add(rule);
            project.Rules.Add(rule2);

            project.StartRules.Add("test", 5);
            project.StartRules.Add("test2", 5);

            Expect.AtLeastOnce.On(random).Method("NextDouble").Will(Return.Value((double)0.5));

            m_GeneratorController.Generate(project);

            Assert.AreEqual(2, project.StartRules.Count);
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestColumns()
        {
            Expect.Once.On(m_ResultViewHelper).Method("AddColumn").With("Determinate", "!Test");

            for (int i = 0; i < 10; i++)
            {
                Expect.Once.On(m_ResultViewHelper).Method("AddItem");
            }

            IRandom random = m_Mockery.NewMock<IRandom>();
            Project project = new Project(random);

            Rule rule = new Rule();

            Expect.AtLeastOnce.On(random).Method("NextDouble").Will(Return.Value((double)0.5));

            rule.Name = "test";
            rule.Probability = 1.0;
            rule.LineNumber = 1;

            LiteralCommand a = new LiteralCommand();
            a.Literal = "a";
            rule.Commands.Add(a);

            Rule rule2 = new Rule();

            rule2.Name = "test2";
            rule2.Probability = 1.0;
            rule2.LineNumber = 1;

            LiteralCommand b = new LiteralCommand();
            b.Literal = "b";
            rule2.Commands.Add(b);

            project.Rules.Add(rule);
            project.Rules.Add(rule2);

            MarkCommand m = new MarkCommand();
            m.Name = "Test";
            m.Value = "yes";

            rule2.Commands.Add(m);

            project.StartRules.Add("test", 5);
            project.StartRules.Add("test2", 5);

            project.Columns.Add("Determinate", "!Test");


            m_GeneratorController.Generate(project);

            Assert.AreEqual(2, project.StartRules.Count);
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestCopy()
        {
            List<Context> selected = new List<Context>();

            Context result = new Context();
            result.Tokens.Add("a");
            result.Tokens.Add("b");
            result.Tokens.Add("c");
            selected.Add(result);
            Expect.Once.On(m_ResultViewHelper).Method("GetSelectedItems").Will(Return.Value(selected));

            Expect.Once.On(m_ClipBoardHelper).Method("Copy").With("abc");
            m_GeneratorController.Copy();

            m_Mockery.VerifyAllExpectationsHaveBeenMet();
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestCopyAdvanced()
        {
            List<Context> selected = new List<Context>();

            Context result = new Context();
            result.Tokens.Add("a");
            result.Tokens.Add("b");
            result.Tokens.Add("c");

            Context branch = result.Branch("b1");
            branch.Tokens.Add("d");

            selected.Add(result);
            Expect.Once.On(m_ResultViewHelper).Method("GetSelectedItems").Will(Return.Value(selected));

            Expect.Once.On(m_ClipBoardHelper).Method("Copy").With(String.Format("abc{0}\tb1: abcd", Environment.NewLine));
            m_GeneratorController.CopyDescription();

            m_Mockery.VerifyAllExpectationsHaveBeenMet();
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestDetailsView()
        {
            List<Context> selected = new List<Context>();

            Context result = new Context();
            result.Tokens.Add("a");
            result.Tokens.Add("b");
            result.Tokens.Add("c");

            Context branch = result.Branch("b1");
            branch.Tokens.Add("d");

            selected.Add(result);

            Expect.Once.On(m_DetailsTextViewHelper).Method("OnDocumentChanged").With(m_GeneratorController, string.Format("abc{0}\tb1: abcd", Environment.NewLine), Is.Anything);

            m_GeneratorController.OnTreeViewSelectionChanged(selected);

            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }

        [Test()]
        public void TestGenerateNullProject()
        {
            m_GeneratorController.Generate(null);
        }

        [Test()]
        public void TestExport()
        {
            List<Context> selected = new List<Context>();

            Context result = new Context();
            result.Tokens.Add("a");
            result.Tokens.Add("b");
            result.Tokens.Add("c");

            Context branch = result.Branch("b1");
            branch.Tokens.Add("d");

            selected.Add(result);

            Expect.Once.On(m_ResultViewHelper).Method("GetAllItems").Will(Return.Value(selected));
            Expect.Once.On(m_ExportHelper).Method("Export");

            m_GeneratorController.Export(m_ExportHelper, @"c:\abc.csv");

            m_Mockery.VerifyAllExpectationsHaveBeenMet();
            m_Mockery.VerifyAllExpectationsHaveBeenMet();
        }
    }
}
