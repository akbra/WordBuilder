//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;

using Whee.WordBuilder.Helpers;

namespace Whee.WordBuilder.ProjectV2
{

	public class ProjectNode : ProjectNodeBase
	{
		public ProjectNode (IProjectSerializer serializer) : base(serializer)
		{			
			LoadDirectives();
		}
		
		override public ProjectNodeType NodeType {
			get {
				return ProjectNodeType.Root;
			}
		}
		
		private void LoadDirectives()
		{
            Token directive = null;

            bool ended = false;

            while (!ended)
            {
                m_serializer.ReadIndentationToken(this);
                directive = m_serializer.ReadTextToken(this);

                if (directive != null)
                {
                    switch (directive.Text.ToLower())
                    {
                        case "tokens":
                            directive.Type = TokenType.Directive;
                            directive.ProjectNode = new TokenSetNode(m_serializer);
                            directive.ProjectNode.Index = directive.Offset;
                            Children.Add(directive.ProjectNode);
                            break;
                        case "rule":
                            directive.Type = TokenType.Directive;
                            directive.ProjectNode = new RuleNode(m_serializer);
                            directive.ProjectNode.Index = directive.Offset;
                            Children.Add(directive.ProjectNode);
                            break;
                        case "startingrule":
                            directive.Type = TokenType.Directive;
                            directive.ProjectNode = new StartingRuleNode(m_serializer);
                            directive.ProjectNode.Index = directive.Offset;
                            Children.Add(directive.ProjectNode);
                            break;
                        case "column":
                            directive.Type = TokenType.Directive;
                            directive.ProjectNode = new ColumnNode(m_serializer);
                            directive.ProjectNode.Index = directive.Offset;
                            Children.Add(directive.ProjectNode);
                            // LoadColumn();
                            break;
                        default:
                            m_serializer.Warn("'" + directive.Text + "' is not a valid directive.", new ProblemAreaNode(directive.Offset));
						    directive.Type = TokenType.Error;
                            break;
                    }
                }
                else
                {
                    ended = m_serializer.ReadLineBreakToken(this).Length == 0;
                }
            }
		}
	}
}
