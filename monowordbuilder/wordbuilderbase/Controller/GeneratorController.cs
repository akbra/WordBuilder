//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4200
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Text;
using System.Collections.Generic;

using Whee.WordBuilder.Model;
using Whee.WordBuilder.Helpers;
using Whee.WordBuilder.UIHelpers;
using Whee.WordBuilder.ProjectV2;
using Whee.WordBuilder.Exporters;

namespace Whee.WordBuilder.Controller
{
	public class GeneratorController
	{
		public GeneratorController(IFileSystem fileSystem, IResultViewHelper resultViewHelper, IClipBoardHelper clipBoardHelper, ITextViewHelper detailsTextViewHelper)
		{
			m_FileSystem = fileSystem;
			m_ResultViewHelper = resultViewHelper;
			m_ResultViewHelper.SelectionChanged += HandleM_ResultViewHelperSelectionChanged;
			m_ClipBoardHelper = clipBoardHelper;
			m_DetailsTextViewHelper = detailsTextViewHelper;
		}

		void HandleM_ResultViewHelperSelectionChanged (object sender, EventArgs e)
		{
			OnTreeViewSelectionChanged(m_ResultViewHelper.GetSelectedItems());
		}
		
		private IFileSystem m_FileSystem;
		private IResultViewHelper m_ResultViewHelper;
		private IClipBoardHelper m_ClipBoardHelper;
		private ITextViewHelper m_DetailsTextViewHelper;
		
		public void Clear()
		{
			m_ResultViewHelper.Clear();
		}
		
		public void Generate(Project project)
		{
			if (project != null)
			{
				if (project.StartRules.Count == 0) {
					project.StartRules.Add("root", 100);
				}
				
				foreach (string col in project.Columns.Keys) {
					m_ResultViewHelper.AddColumn(col, project.Columns[col]);
				}
				
				foreach (string ruleiter in project.StartRules.Keys) {
					for (int c = 1; c <= project.StartRules[ruleiter]; c++) {
						Context item = project.GetWord(ruleiter);
						m_ResultViewHelper.AddItem(item);
					}
				}
			}
		}

		private delegate string ContextRendererDelegate(Context ctx);
		
		private string RenderContexts(List<Context> contexts, ContextRendererDelegate renderer)
		{
			StringBuilder sb = new StringBuilder();

			foreach (Context ctx in contexts)
			{
				sb.AppendLine(renderer(ctx));
			}

			return sb.ToString().Trim();
		}
		
		private string ToStringRenderer(Context ctx)
		{
			return ctx.ToString();
		}
		
		private string DescriptionRenderer(Context ctx)
		{
			return ctx.Description("");
		}
		
		public void Copy()
		{
			m_ClipBoardHelper.Copy(RenderContexts(m_ResultViewHelper.GetSelectedItems(), ToStringRenderer));
		}
		
		public void CopyDescription()
		{
			m_ClipBoardHelper.Copy(RenderContexts(m_ResultViewHelper.GetSelectedItems(), DescriptionRenderer));
		}
		
		public void OnTreeViewSelectionChanged(List<Context> items)
		{
			m_DetailsTextViewHelper.OnDocumentChanged(this, RenderContexts(items, DescriptionRenderer), null);
		}
		
		public void Export(IExporter exporter, string path)
		{
			exporter.Export(m_ResultViewHelper.GetAllItems(), path, m_FileSystem);
		}
	}
}
